# PostgreSQL Database Deployment for BookingBridge
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: bookingbridge-postgresql
  namespace: bookingbridge
  labels:
    app.kubernetes.io/name: bookingbridge-postgresql
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "15"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: attribution-tracker
    app.kubernetes.io/managed-by: kubectl
spec:
  serviceName: bookingbridge-postgresql
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: bookingbridge-postgresql
      app.kubernetes.io/instance: production
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bookingbridge-postgresql
        app.kubernetes.io/instance: production
        app.kubernetes.io/version: "15"
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: attribution-tracker
    spec:
      # Security Context
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      
      containers:
      - name: postgresql
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        
        # Security Context
        securityContext:
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
            add:
            - CHOWN
            - DAC_OVERRIDE
            - FOWNER
            - SETGID
            - SETUID
        
        ports:
        - name: postgresql
          containerPort: 5432
          protocol: TCP
        
        # Environment Variables
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: bookingbridge-secrets
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: bookingbridge-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: bookingbridge-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=scram-sha-256"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        
        # Resource Limits
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        
        # Health Checks
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        # Volume Mounts
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
          readOnly: true
        - name: postgresql-init
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
      
      volumes:
      - name: postgresql-config
        configMap:
          name: postgresql-config
      - name: postgresql-init
        configMap:
          name: postgresql-init
  
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
      labels:
        app.kubernetes.io/name: bookingbridge-postgresql
        app.kubernetes.io/component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-ssd"  # Use your preferred storage class
      resources:
        requests:
          storage: 100Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: bookingbridge-postgresql
  namespace: bookingbridge
  labels:
    app.kubernetes.io/name: bookingbridge-postgresql
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: postgresql
    protocol: TCP
    name: postgresql
  selector:
    app.kubernetes.io/name: bookingbridge-postgresql
    app.kubernetes.io/instance: production

---
# PostgreSQL Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: bookingbridge
  labels:
    app.kubernetes.io/name: bookingbridge-postgresql
    app.kubernetes.io/component: config
data:
  postgresql.conf: |
    # Performance Configuration
    shared_buffers = 1GB
    effective_cache_size = 3GB
    work_mem = 16MB
    maintenance_work_mem = 256MB
    
    # Connection Configuration
    max_connections = 200
    
    # Write-Ahead Logging
    wal_level = replica
    max_wal_size = 2GB
    min_wal_size = 1GB
    checkpoint_completion_target = 0.9
    
    # Query Planning
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Monitoring
    log_statement = 'ddl'
    log_duration = on
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    
    # Security
    ssl = off  # Handled by Kubernetes/Istio
    password_encryption = scram-sha-256

---
# PostgreSQL Initialization Scripts
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-init
  namespace: bookingbridge
  labels:
    app.kubernetes.io/name: bookingbridge-postgresql
    app.kubernetes.io/component: init
data:
  01-init.sql: |
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
    -- Create read-only user for monitoring
    CREATE USER monitoring_user WITH PASSWORD 'monitoring_password';
    GRANT CONNECT ON DATABASE bookingbridge TO monitoring_user;
    GRANT USAGE ON SCHEMA public TO monitoring_user;
    GRANT SELECT ON ALL TABLES IN SCHEMA public TO monitoring_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO monitoring_user;

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bookingbridge-redis
  namespace: bookingbridge
  labels:
    app.kubernetes.io/name: bookingbridge-redis
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "7"
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: attribution-tracker
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: bookingbridge-redis
      app.kubernetes.io/instance: production
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bookingbridge-redis
        app.kubernetes.io/instance: production
        app.kubernetes.io/version: "7"
        app.kubernetes.io/component: cache
        app.kubernetes.io/part-of: attribution-tracker
    spec:
      # Security Context
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      
      containers:
      - name: redis
        image: redis:7-alpine
        imagePullPolicy: IfNotPresent
        
        command:
        - redis-server
        - /etc/redis/redis.conf
        
        # Security Context
        securityContext:
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        
        # Environment Variables
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: bookingbridge-secrets
              key: REDIS_PASSWORD
        
        # Resource Limits
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        
        # Health Checks
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        # Volume Mounts
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
          readOnly: true
        - name: tmp
          mountPath: /tmp
      
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc
      - name: redis-config
        configMap:
          name: redis-config
      - name: tmp
        emptyDir: {}

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: bookingbridge-redis
  namespace: bookingbridge
  labels:
    app.kubernetes.io/name: bookingbridge-redis
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: cache
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: redis
    protocol: TCP
    name: redis
  selector:
    app.kubernetes.io/name: bookingbridge-redis
    app.kubernetes.io/instance: production

---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
  namespace: bookingbridge
  labels:
    app.kubernetes.io/name: bookingbridge-redis
    app.kubernetes.io/component: storage
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: "fast-ssd"
  resources:
    requests:
      storage: 20Gi

---
# Redis Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: bookingbridge
  labels:
    app.kubernetes.io/name: bookingbridge-redis
    app.kubernetes.io/component: config
data:
  redis.conf: |
    # Network
    bind 0.0.0.0
    port 6379
    tcp-backlog 511
    
    # General
    daemonize no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    databases 16
    
    # Security
    requirepass ${REDIS_PASSWORD}
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    
    # Append Only Mode
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    
    # Memory Management
    maxmemory 800mb
    maxmemory-policy allkeys-lru
    
    # Performance
    tcp-keepalive 300
    timeout 0