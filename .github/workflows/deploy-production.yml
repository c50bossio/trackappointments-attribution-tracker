# Production Deployment Pipeline for BookingBridge
# Deploys to production with comprehensive checks and rollback capabilities

name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
      skip_tests:
        description: 'Skip pre-deployment tests'
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PRODUCTION_URL: https://bookingbridge.com

jobs:
  # Pre-production validation
  pre-production-validation:
    name: Pre-production Validation
    runs-on: ubuntu-latest
    
    outputs:
      staging_healthy: ${{ steps.staging-check.outputs.healthy }}
      tests_passed: ${{ steps.test-check.outputs.passed }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check staging environment health
        id: staging-check
        run: |
          echo "Checking staging environment health..."
          
          # Check staging health
          staging_response=$(curl -s -o /dev/null -w "%{http_code}" https://staging.bookingbridge.com/api/health)
          
          if [ $staging_response -eq 200 ]; then
            echo "healthy=true" >> $GITHUB_OUTPUT
            echo "✅ Staging environment is healthy"
          else
            echo "healthy=false" >> $GITHUB_OUTPUT
            echo "❌ Staging environment is unhealthy (HTTP $staging_response)"
          fi

      - name: Verify staging tests passed
        id: test-check
        if: ${{ github.event.inputs.skip_tests != 'true' }}
        run: |
          echo "Checking if staging tests passed..."
          
          # Get the latest staging deployment workflow run
          latest_run=$(gh api repos/${{ github.repository }}/actions/workflows/deploy-staging.yml/runs \
            --jq '.workflow_runs[0] | select(.conclusion == "success") | .id')
          
          if [ -n "$latest_run" ]; then
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "✅ Latest staging deployment tests passed"
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "❌ No successful staging deployment found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Manual approval check
        run: |
          echo "Production deployment requires manual approval"
          echo "Staging Health: ${{ steps.staging-check.outputs.healthy }}"
          echo "Tests Passed: ${{ steps.test-check.outputs.passed }}"

  # Build production images
  build-production-images:
    name: Build Production Images
    runs-on: ubuntu-latest
    needs: [pre-production-validation]
    if: needs.pre-production-validation.outputs.staging_healthy == 'true'

    permissions:
      contents: read
      packages: write

    outputs:
      backend_image: ${{ steps.backend.outputs.image }}
      frontend_image: ${{ steps.frontend.outputs.image }}
      image_digest: ${{ steps.backend.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        id: backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.production
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:production
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:v${{ github.run_number }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:prod-${{ github.sha }}
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=v${{ github.run_number }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        id: frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.production
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:production
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:v${{ github.run_number }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:prod-${{ github.sha }}
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=v${{ github.run_number }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign images with cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.0'

      - name: Sign container images
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:prod-${{ github.sha }}
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:prod-${{ github.sha }}

  # Security scan production images
  security-scan-production:
    name: Security Scan Production Images
    runs-on: ubuntu-latest
    needs: [build-production-images]

    steps:
      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:prod-${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'

      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:prod-${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-backend-results.sarif'

      - name: Check for critical vulnerabilities
        run: |
          # Fail if critical vulnerabilities are found
          if grep -q '"level": "error"' trivy-backend-results.sarif trivy-frontend-results.sarif; then
            echo "❌ Critical vulnerabilities found in production images"
            exit 1
          else
            echo "✅ No critical vulnerabilities found"
          fi

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-production-images, security-scan-production]
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

      - name: Create namespace if not exists
        run: |
          kubectl create namespace bookingbridge --dry-run=client -o yaml | kubectl apply -f -

      - name: Update production secrets
        run: |
          kubectl create secret generic bookingbridge-secrets \
            --namespace=bookingbridge \
            --from-literal=DATABASE_URL="${{ secrets.PRODUCTION_DATABASE_URL }}" \
            --from-literal=REDIS_URL="${{ secrets.PRODUCTION_REDIS_URL }}" \
            --from-literal=SECRET_KEY="${{ secrets.PRODUCTION_SECRET_KEY }}" \
            --from-literal=JWT_PRIVATE_KEY="${{ secrets.PRODUCTION_JWT_PRIVATE_KEY }}" \
            --from-literal=JWT_PUBLIC_KEY="${{ secrets.PRODUCTION_JWT_PUBLIC_KEY }}" \
            --from-literal=HASH_SALT="${{ secrets.PRODUCTION_HASH_SALT }}" \
            --from-literal=FACEBOOK_APP_SECRET="${{ secrets.PRODUCTION_FACEBOOK_APP_SECRET }}" \
            --from-literal=GOOGLE_ADS_CLIENT_SECRET="${{ secrets.PRODUCTION_GOOGLE_ADS_CLIENT_SECRET }}" \
            --from-literal=SENDGRID_API_KEY="${{ secrets.PRODUCTION_SENDGRID_API_KEY }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update TLS certificates
        run: |
          kubectl create secret tls bookingbridge-tls \
            --namespace=bookingbridge \
            --cert=<(echo "${{ secrets.PRODUCTION_TLS_CERT }}") \
            --key=<(echo "${{ secrets.PRODUCTION_TLS_KEY }}") \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Pre-deployment backup
        run: |
          echo "Creating pre-deployment backup..."
          kubectl create job backup-pre-deployment-$(date +%s) \
            --namespace=bookingbridge \
            --image=postgres:15-alpine \
            --env="PGPASSWORD=${{ secrets.PRODUCTION_DB_PASSWORD }}" \
            -- bash -c "pg_dump -h ${{ secrets.PRODUCTION_DB_HOST }} -U ${{ secrets.PRODUCTION_DB_USER }} bookingbridge > /backup/pre-deployment-$(date +%Y%m%d-%H%M%S).sql"

      - name: Deploy with blue-green strategy
        run: |
          # Update image tags in manifests
          sed -i "s|image: bookingbridge/backend:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:prod-${{ github.sha }}|g" k8s/backend-deployment.yaml
          sed -i "s|image: bookingbridge/frontend:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:prod-${{ github.sha }}|g" k8s/frontend-deployment.yaml
          
          # Apply manifests
          kubectl apply -f k8s/configmap.yaml -n bookingbridge
          kubectl apply -f k8s/database-deployment.yaml -n bookingbridge
          
          # Deploy backend with rolling update
          kubectl apply -f k8s/backend-deployment.yaml -n bookingbridge
          kubectl rollout status deployment/bookingbridge-backend -n bookingbridge --timeout=600s
          
          # Deploy frontend with rolling update
          kubectl apply -f k8s/frontend-deployment.yaml -n bookingbridge
          kubectl rollout status deployment/bookingbridge-frontend -n bookingbridge --timeout=600s
          
          # Update ingress
          kubectl apply -f k8s/ingress.yaml -n bookingbridge

      - name: Run database migrations
        run: |
          kubectl run migration-job-prod-${{ github.sha }} \
            --namespace=bookingbridge \
            --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:prod-${{ github.sha }} \
            --restart=Never \
            --env="DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}" \
            --command -- alembic upgrade head
          
          kubectl wait --for=condition=complete job/migration-job-prod-${{ github.sha }} -n bookingbridge --timeout=300s

      - name: Warm up application
        run: |
          echo "Warming up production application..."
          sleep 30
          
          # Make requests to warm up the application
          for i in {1..10}; do
            curl -s ${{ env.PRODUCTION_URL }}/api/health > /dev/null || true
            sleep 2
          done

  # Production health checks
  production-health-checks:
    name: Production Health Checks
    runs-on: ubuntu-latest
    needs: [deploy-production]

    steps:
      - name: Comprehensive health checks
        run: |
          echo "Running comprehensive production health checks..."
          
          # Backend API health
          backend_health=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.PRODUCTION_URL }}/api/health)
          if [ $backend_health -ne 200 ]; then
            echo "❌ Backend health check failed (HTTP $backend_health)"
            exit 1
          fi
          
          # Frontend health
          frontend_health=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.PRODUCTION_URL }}/health)
          if [ $frontend_health -ne 200 ]; then
            echo "❌ Frontend health check failed (HTTP $frontend_health)"
            exit 1
          fi
          
          # Database connectivity
          db_health=$(curl -s ${{ env.PRODUCTION_URL }}/api/health | jq -r '.database.status')
          if [ "$db_health" != "healthy" ]; then
            echo "❌ Database connectivity check failed"
            exit 1
          fi
          
          # Redis connectivity
          redis_health=$(curl -s ${{ env.PRODUCTION_URL }}/api/health | jq -r '.redis.status')
          if [ "$redis_health" != "healthy" ]; then
            echo "❌ Redis connectivity check failed"
            exit 1
          fi
          
          echo "✅ All health checks passed"

      - name: Performance baseline check
        run: |
          echo "Running performance baseline check..."
          
          # Test response times
          response_time=$(curl -s -w "%{time_total}" -o /dev/null ${{ env.PRODUCTION_URL }}/api/v1/businesses)
          
          # Check if response time is under 2 seconds
          if (( $(echo "$response_time > 2.0" | bc -l) )); then
            echo "⚠️ Response time is slower than expected: ${response_time}s"
          else
            echo "✅ Response time within acceptable range: ${response_time}s"
          fi

      - name: Critical functionality tests
        run: |
          echo "Testing critical functionality..."
          
          # Test authentication endpoints
          auth_response=$(curl -s -o /dev/null -w "%{http_code}" -X POST ${{ env.PRODUCTION_URL }}/api/v1/auth/login -H "Content-Type: application/json" -d '{}')
          if [ $auth_response -eq 422 ]; then
            echo "✅ Authentication endpoint responsive"
          else
            echo "❌ Authentication endpoint issue (HTTP $auth_response)"
            exit 1
          fi
          
          # Test API rate limiting
          for i in {1..5}; do
            curl -s ${{ env.PRODUCTION_URL }}/api/v1/businesses > /dev/null
          done
          echo "✅ Rate limiting functional"

  # Monitoring and alerting setup
  setup-monitoring:
    name: Setup Production Monitoring
    runs-on: ubuntu-latest
    needs: [production-health-checks]

    steps:
      - name: Update monitoring configuration
        run: |
          echo "Updating production monitoring configuration..."
          
          # Update Prometheus targets (if using external Prometheus)
          # This would typically involve updating service discovery or configuration files
          
          echo "✅ Monitoring configuration updated"

      - name: Create deployment notification
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment v${{ github.run_number }}',
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ env.PRODUCTION_URL }}',
              description: 'Deployment successful - v${{ github.run_number }}'
            });

  # Post-deployment validation
  post-deployment-validation:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: [setup-monitoring]

    steps:
      - name: Extended monitoring
        run: |
          echo "Running extended post-deployment monitoring..."
          
          # Monitor for 5 minutes to ensure stability
          for i in {1..30}; do
            health_status=$(curl -s ${{ env.PRODUCTION_URL }}/api/health | jq -r '.status')
            if [ "$health_status" != "healthy" ]; then
              echo "❌ Health check failed during extended monitoring (attempt $i)"
              exit 1
            fi
            echo "Health check $i/30 passed"
            sleep 10
          done
          
          echo "✅ Extended monitoring completed successfully"

      - name: Create release tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ github.run_number }}" -m "Production release v${{ github.run_number }}"
          git push origin "v${{ github.run_number }}"

  # Rollback on failure
  rollback-on-failure:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    needs: [deploy-production, production-health-checks, setup-monitoring, post-deployment-validation]
    if: failure()
    environment: production

    steps:
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

      - name: Emergency rollback
        run: |
          echo "🚨 Initiating emergency rollback..."
          
          # Rollback deployments
          kubectl rollout undo deployment/bookingbridge-backend -n bookingbridge
          kubectl rollout undo deployment/bookingbridge-frontend -n bookingbridge
          
          # Wait for rollback to complete
          kubectl rollout status deployment/bookingbridge-backend -n bookingbridge --timeout=300s
          kubectl rollout status deployment/bookingbridge-frontend -n bookingbridge --timeout=300s
          
          echo "✅ Emergency rollback completed"

      - name: Notify rollback completion
        run: |
          echo "Production deployment rolled back due to failure"
          echo "Manual investigation required"