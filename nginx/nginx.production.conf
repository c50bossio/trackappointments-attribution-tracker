# BookingBridge Production Nginx Configuration
# Enterprise-grade configuration with security, performance, and monitoring

# Global settings
user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Load dynamic modules
load_module modules/ngx_http_geoip_module.so;
load_module modules/ngx_http_realip_module.so;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    
    # Hide Nginx version
    server_tokens off;
    
    # File upload limits
    client_max_body_size 10M;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Brotli compression (if module available)
    brotli on;
    brotli_comp_level 6;
    brotli_types
        text/plain
        text/css
        application/json
        application/javascript
        text/xml
        application/xml
        application/xml+rss
        text/javascript;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=webhook_limit:10m rate=100r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
    
    # Real IP configuration (for load balancers/CDN)
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 172.16.0.0/12;
    set_real_ip_from 192.168.0.0/16;
    set_real_ip_from 127.0.0.1/32;
    
    # Logging format
    log_format main_ext '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    log_format json_analytics escape=json
        '{'
            '"time_local":"$time_local",'
            '"remote_addr":"$remote_addr",'
            '"remote_user":"$remote_user",'
            '"request":"$request",'
            '"status":"$status",'
            '"body_bytes_sent":"$body_bytes_sent",'
            '"request_time":"$request_time",'
            '"http_referrer":"$http_referer",'
            '"http_user_agent":"$http_user_agent",'
            '"http_x_forwarded_for":"$http_x_forwarded_for",'
            '"http_host":"$http_host",'
            '"server_name":"$server_name",'
            '"upstream_addr":"$upstream_addr",'
            '"upstream_connect_time":"$upstream_connect_time",'
            '"upstream_header_time":"$upstream_header_time",'
            '"upstream_response_time":"$upstream_response_time",'
            '"upstream_status":"$upstream_status"'
        '}';
    
    access_log /var/log/nginx/access.log main_ext;
    access_log /var/log/nginx/analytics.log json_analytics;
    
    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security headers map
    map $sent_http_content_type $security_headers {
        ~*text/html "nosniff";
        default "nosniff";
    }
    
    # Upstream definitions
    upstream bookingbridge_backend {
        least_conn;
        server bookingbridge-backend-1:8000 max_fails=3 fail_timeout=30s;
        server bookingbridge-backend-2:8000 max_fails=3 fail_timeout=30s;
        server bookingbridge-backend-3:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream bookingbridge_frontend {
        least_conn;
        server bookingbridge-frontend-1:3000 max_fails=3 fail_timeout=30s;
        server bookingbridge-frontend-2:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # Main server block - HTTPS
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name bookingbridge.com www.bookingbridge.com;
        
        # SSL certificates
        ssl_certificate /etc/ssl/certs/bookingbridge.crt;
        ssl_certificate_key /etc/ssl/private/bookingbridge.key;
        ssl_trusted_certificate /etc/ssl/certs/bookingbridge-chain.crt;
        
        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://www.google-analytics.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https: blob:; connect-src 'self' https://api.bookingbridge.com https://www.google-analytics.com; frame-ancestors 'none';" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
        
        # Rate limiting
        limit_req zone=api_limit burst=20 nodelay;
        limit_conn conn_limit 10;
        
        # Root location (frontend)
        location / {
            proxy_pass http://bookingbridge_frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            proxy_cache_bypass $http_upgrade;
            proxy_redirect off;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
            
            # Enable caching for static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                proxy_pass http://bookingbridge_frontend;
                proxy_cache_valid 200 1h;
                add_header Cache-Control "public, immutable";
                expires 1h;
            }
        }
        
        # API routes (backend)
        location /api/ {
            proxy_pass http://bookingbridge_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            proxy_redirect off;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
            proxy_send_timeout 300s;
            
            # Buffer settings for better performance
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
            
            # Add response headers
            add_header X-Backend-Server $upstream_addr always;
        }
        
        # Authentication endpoints - stricter rate limiting
        location /api/v1/auth/ {
            limit_req zone=auth_limit burst=10 nodelay;
            
            proxy_pass http://bookingbridge_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Additional security for auth endpoints
            add_header X-Frame-Options "DENY" always;
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        }
        
        # Webhook endpoints - higher rate limit for legitimate traffic
        location /api/v1/webhooks/ {
            limit_req zone=webhook_limit burst=200 nodelay;
            
            proxy_pass http://bookingbridge_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Webhook-specific headers
            proxy_set_header X-Webhook-Source $remote_addr;
            proxy_set_header X-Webhook-Timestamp $time_iso8601;
        }
        
        # Health check endpoint - no rate limiting
        location = /health {
            access_log off;
            proxy_pass http://bookingbridge_frontend;
            proxy_set_header Host $host;
        }
        
        location = /api/health {
            access_log off;
            proxy_pass http://bookingbridge_backend;
            proxy_set_header Host $host;
        }
        
        # Metrics endpoint (internal only)
        location = /metrics {
            allow 172.16.0.0/12;  # Internal network
            allow 10.0.0.0/8;     # Internal network
            deny all;
            
            access_log off;
            proxy_pass http://bookingbridge_backend;
            proxy_set_header Host $host;
        }
        
        # Block common attack patterns
        location ~* \.(php|asp|aspx|jsp|cgi)$ {
            return 444;  # Close connection without response
        }
        
        location ~* /(wp-admin|wp-login|phpMyAdmin|admin) {
            return 444;
        }
        
        # Block requests with suspicious patterns
        if ($http_user_agent ~* (sqlmap|nikto|wpscan|acunetix|nessus)) {
            return 444;
        }
        
        # Custom error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
    
    # Redirect HTTP to HTTPS
    server {
        listen 80;
        listen [::]:80;
        server_name bookingbridge.com www.bookingbridge.com;
        
        # Allow Let's Encrypt challenges
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }
    
    # Redirect www to non-www (optional)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name www.bookingbridge.com;
        
        ssl_certificate /etc/ssl/certs/bookingbridge.crt;
        ssl_certificate_key /etc/ssl/private/bookingbridge.key;
        
        return 301 https://bookingbridge.com$request_uri;
    }
    
    # Status page for monitoring
    server {
        listen 127.0.0.1:8080;
        server_name localhost;
        
        location = /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
        
        location = /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}

# Stream block for TCP/UDP load balancing (if needed)
stream {
    # Log format for stream
    log_format stream_routing '$remote_addr [$time_local] '
                             '$protocol $status $bytes_sent $bytes_received '
                             '$session_time';
    
    # PostgreSQL load balancing (if needed)
    upstream postgres_cluster {
        server postgres-master:5432 weight=3;
        server postgres-replica:5432 weight=1 backup;
    }
    
    # Redis load balancing (if needed)
    upstream redis_cluster {
        server redis-master:6379 weight=3;
        server redis-replica:6379 weight=1 backup;
    }
}